name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  contents: read
  pull-requests: write
env:
  APP_NAME: test-app
  IMAGE: test-app
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}

  BASE_ENVIRONMENT: 'development'
  ENVIRONMENT_TYPE: 'development'
  SCORE_HUMANITEC_VERSION: '0.8.0'
  ENVIRONMENT_ID: pr-${{ github.event.number }}
  ENVIRONMENT_NAME: PR-${{ github.event.number }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: Create Humanitec Env
        run: |
            # Get deployment ID of the main development environment
            curl \
            -H "Content-Type: application/json" \
            -H 'Authorization: Bearer ${{ secrets.HUMANITEC_TOKEN }}' \
            https://api.humanitec.io/orgs/${{ vars.HUMANITEC_ORG_ID }}/apps/${{ env.APP_NAME }}/envs/${{ env.BASE_ENVIRONMENT }} \
            | jq -r ".last_deploy.id" > deploy_id.txt

            # Create a new environment for the PR
            curl -X POST \
            -H "Content-Type: application/json" \
            -H 'Authorization: Bearer ${{ secrets.HUMANITEC_TOKEN }}' \
            https://api.humanitec.io/orgs/${{ vars.HUMANITEC_ORG_ID }}/apps/${{ env.APP_NAME }}/envs \
            --data-binary @- << EOF
            {
              "from_deploy_id": "$(cat deploy_id.txt)",
              "id": "${{ env.ENVIRONMENT_ID }}",
              "name": "${{ env.ENVIRONMENT_NAME }}",
              "type": "${{ env.ENVIRONMENT_TYPE }}"
            }
            EOF
      - uses: score-spec/setup-score@v2
        with:
          file: score-humanitec
          version: ${{ env.SCORE_HUMANITEC_VERSION }}
      - name: Set Tag with SHA
        run: echo "TAG=`echo $GITHUB_SHA | cut -c 1-7`" >> $GITHUB_ENV

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to aws ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: "set CONTAINER_REGISTRY env var"
        run: |
          echo "CONTAINER_REGISTRY=$REGISTRY" >> "$GITHUB_ENV"
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}


      - run: docker build --platform linux/amd64 . -t $CONTAINER_REGISTRY/$IMAGE:$TAG
      - run: docker push $CONTAINER_REGISTRY/$IMAGE:$TAG

      - name: Inform Humanitec
        run: |-
          curl \
            --request POST 'https://api.humanitec.io/orgs/${{ vars.HUMANITEC_ORG_ID }}/artefact-versions' \
            --header 'Authorization: Bearer ${{ secrets.HUMANITEC_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "name": "'$CONTAINER_REGISTRY/$IMAGE'",
                "version": "'$TAG'",
                "type": "container",
                "commit": "'$GITHUB_SHA'",
                "ref": "'$GITHUB_REF'"
            }'

      - name: Run Score
        run: |
          score-humanitec delta \
              --retry \
              --deploy \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ vars.HUMANITEC_ORG_ID }} \
              --app ${{ env.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              -f score.yaml \
              --extensions humanitec.score.yaml \
              --workload-source-url "https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/score.yaml" \
              --property containers.frontend.image=$CONTAINER_REGISTRY/$IMAGE:$TAG \
              --message "$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.pull_request.commits_url }}?per_page=10" | jq -r .[-1].commit.message)" \
              | tee score_output.json
      - name: Wait for deployment
        run: |
          sleep 1

          IS_DONE=false

          while [ "$IS_DONE" = false ]; do
            CURRENT_STATUS=$(curl \
              -H "Content-Type: application/json" \
              -H 'Authorization: Bearer ${{ secrets.HUMANITEC_TOKEN }}' \
              https://api.humanitec.io/orgs/${{ vars.HUMANITEC_ORG_ID }}/apps/${{ env.APP_NAME }}/envs/${{ env.ENVIRONMENT_ID }} \
              | jq -r ".last_deploy.status")

            INPROGRESS="in progress"

            if [ "$CURRENT_STATUS" = "$INPROGRESS" ]; then
              echo "Deployment still in progress..."
              sleep 1
            else
              echo "Deployment complete!"
              IS_DONE=true
            fi
          done
      - name: Build Comment Message
        run: |
          ENV_URL=$(jq -r ".metadata.url" score_output.json)
          DEPLOYMENT_ID=$(jq -r ".id" score_output.json)
          DOMAINS=$(curl -H "Authorization: Bearer ${{ secrets.HUMANITEC_TOKEN }}" https://api.humanitec.io/orgs/${{ vars.HUMANITEC_ORG_ID }}/apps/${{ env.APP_NAME }}/envs/${{ env.ENVIRONMENT_ID }}/resources | jq -r '. | map(. | select(.type == "dns")) | map((.res_id | split(".") | .[1]) + ": [" + .resource.host + "](https://" + .resource.host + ")") | join("\n")')

          echo "## Deployment Complete for ${{ env.ENVIRONMENT_NAME }}! :tada:" >> pr_message.txt
          echo "" >> pr_message.txt

          echo "### [View in Humanitec]($ENV_URL)" >> pr_message.txt
          echo "Deployment ID: $DEPLOYMENT_ID" >> pr_message.txt

          echo "" >> pr_message.txt
          echo "### Domains:" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "$DOMAINS" >> pr_message.txt
          echo "" >> pr_message.txt

          echo "<details><summary>Score Output</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Score Output:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          cat score_output.json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          cat pr_message.txt
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: pr_message.txt


